//------------------------------------------------------------------------------
/// \file GeneratorEE.h
//
// Author(s):
//    Christian Bauer
//
// Copyright:
//    Copyright (C) 2012 LBNL
//
//    This file is part of the Geneva MC framework. Geneva is distributed under
//    the terms of the GNU General Public License version 3 (GPLv3), see the
//    COPYING file that comes with this distribution for details.
//    Please respect the academic usage guidelines in the GUIDELINES file.
//
// Description:
//    Interface of class GeneratorEE
//------------------------------------------------------------------------------

#ifndef GENEVA_GENERATOR_EE_H
#define GENEVA_GENERATOR_EE_H

#include "IGenerator.h"
#include "SignatureSet.h"
#include "Configuration.h"
#include "QCD.h"
#include "RegionInfo.h"
#include "RegionInfoList.h"
#include "FKSMapping.h"
#include "PhiRadFKSGenerator.h"

namespace Geneva
{

//------------------------------------------------------------------------------
/**
 * \class GeneratorEE
 * \ingroup gen
 *
 * \brief Generator based on the RAMBO algorithm by Ellis, Kleiss, and Stirling.
 *
 * Implementation of a phase space generator based on the RAMBO flat phase space
 * generator by Ellis, Kleiss, and Stirling.
 * \note does not include flux factor.
 */
//------------------------------------------------------------------------------
class GeneratorEE : virtual public SingleChannelGenerator
{
   private:
      double _lastWeight;              ///< the weight for the last generated Configuration
      double _importanceJac;           ///< Jacobian coming from importance sampling
      bool _isCalculated;              ///< Is true if the generation Weight has been calculated
      SignatureSet _sigSet;            ///< the signatures we will generate
      Configuration _lastConfig;       ///< the last configuration generated
      double _Ecm;
      int _nf;                         ///< number of light flavors
      std::vector<int> _color;         ///< vector with the color labels
      std::vector<int> _antiColor;     ///< vector with the antiColor labels
      std::list<SignatureSet> _allSigs;       ///< all signatures ordered by 
      std::list<RegionInfoList> _regionInfoLists;
      FKSMapping* _mapping;

   const static int _nums = 5;
   const static int _numv = 5;
   const static int _numg = 10;
   double _tIRRatio;

   // this is the array for qqg splitting for a 10 by 5 by 5 grid
      const double arrayqqg[_numg][_nums*_numv+1]={{1.83169,0.42242721637216574,0.5776930643234351,0.6054452765487014,0.6095641465529688,0.6101612729528741,
      0.6694878830310911,0.9399659417994403,1.0134673591847165,1.0295542918646703,1.0329450314836313,
      0.8399091428744104,1.183194313102852,1.3270249417514743,1.3741260241571782,1.3886851713731647,0.8009320304336658,
      1.0784099921488641,1.2605634567358641,1.3521450479855144,1.3945833986730691,0.48501133302963756,
      0.5732311386160185,0.6611470786026035,0.7321988148893847,0.7848204325776953},{3.07325,0.42242721637216574,0.5776930643234351,0.6054452765487014,0.6095641465529688,0.6101612729528741,
         0.6694878830310911,0.9399659417994403,1.0134673591847165,1.0295542918646703,1.0329450314836313,
         0.8399091428744104,1.183194313102852,1.3270249417514743,1.3741260241571782,1.3886851713731647,0.8009320304336658,
         1.0784099921488641,1.2605634567358641,1.3521450479855144,1.3945833986730691,0.48501133302963756,
         0.5732311386160185,0.6611470786026035,0.7321988148893847,0.7848204325776953},{5.15637,0.42242721637216574,0.5776930643234351,0.6054452765487014,0.6095641465529688,0.6101612729528741,
            0.6694878830310911,0.9399659417994403,1.0134673591847165,1.0295542918646703,1.0329450314836313,
            0.8399091428744104,1.183194313102852,1.3270249417514743,1.3741260241571782,1.3886851713731647,0.8009320304336658,
            1.0784099921488641,1.2605634567358641,1.3521450479855144,1.3945833986730691,0.48501133302963756,
            0.5732311386160185,0.6611470786026035,0.7321988148893847,0.7848204325776953},{8.65148,0.42242721637216574,0.5776930643234351,0.6054452765487014,0.6095641465529688,0.6101612729528741,
               0.6694878830310911,0.9399659417994403,1.0134673591847165,1.0295542918646703,1.0329450314836313,
               0.8399091428744104,1.183194313102852,1.3270249417514743,1.3741260241571782,1.3886851713731647,0.8009320304336658,
               1.0784099921488641,1.2605634567358641,1.3521450479855144,1.3945833986730691,0.48501133302963756,
               0.5732311386160185,0.6611470786026035,0.7321988148893847,0.7848204325776953},{14.5156,0.42242721637216574,0.5776930643234351,0.6054452765487014,0.6095641465529688,0.6101612729528741,
                  0.6694878830310911,0.9399659417994403,1.0134673591847165,1.0295542918646703,1.0329450314836313,
                  0.8399091428744104,1.183194313102852,1.3270249417514743,1.3741260241571782,1.3886851713731647,0.8009320304336658,
                  1.0784099921488641,1.2605634567358641,1.3521450479855144,1.3945833986730691,0.48501133302963756,
                  0.5732311386160185,0.6611470786026035,0.7321988148893847,0.7848204325776953},{24.3547,0.42242721637216574,0.5776930643234351,0.6054452765487014,0.6095641465529688,0.6101612729528741,
                     0.6694878830310911,0.9399659417994403,1.0134673591847165,1.0295542918646703,1.0329450314836313,
                     0.8399091428744104,1.183194313102852,1.3270249417514743,1.3741260241571782,1.3886851713731647,0.8009320304336658,
                     1.0784099921488641,1.2605634567358641,1.3521450479855144,1.3945833986730691,0.48501133302963756,
                     0.5732311386160185,0.6611470786026035,0.7321988148893847,0.7848204325776953},{40.8629,0.42242721637216574,0.5776930643234351,0.6054452765487014,0.6095641465529688,0.6101612729528741,
                        0.6694878830310911,0.9399659417994403,1.0134673591847165,1.0295542918646703,1.0329450314836313,
                        0.8399091428744104,1.183194313102852,1.3270249417514743,1.3741260241571782,1.3886851713731647,0.8009320304336658,
                        1.0784099921488641,1.2605634567358641,1.3521450479855144,1.3945833986730691,0.48501133302963756,
                        0.5732311386160185,0.6611470786026035,0.7321988148893847,0.7848204325776953},{68.5606,0.42242721637216574,0.5776930643234351,0.6054452765487014,0.6095641465529688,0.6101612729528741,
                           0.6694878830310911,0.9399659417994403,1.0134673591847165,1.0295542918646703,1.0329450314836313,
                           0.8399091428744104,1.183194313102852,1.3270249417514743,1.3741260241571782,1.3886851713731647,0.8009320304336658,
                           1.0784099921488641,1.2605634567358641,1.3521450479855144,1.3945833986730691,0.48501133302963756,
                           0.5732311386160185,0.6611470786026035,0.7321988148893847,0.7848204325776953},{115.033,0.42242721637216574,0.5776930643234351,0.6054452765487014,0.6095641465529688,0.6101612729528741,
                              0.6694878830310911,0.9399659417994403,1.0134673591847165,1.0295542918646703,1.0329450314836313,
                              0.8399091428744104,1.183194313102852,1.3270249417514743,1.3741260241571782,1.3886851713731647,0.8009320304336658,
                              1.0784099921488641,1.2605634567358641,1.3521450479855144,1.3945833986730691,0.48501133302963756,
                              0.5732311386160185,0.6611470786026035,0.7321988148893847,0.7848204325776953},{250.,0.42242721637216574,0.5776930643234351,0.6054452765487014,0.6095641465529688,0.6101612729528741,
                                 0.6694878830310911,0.9399659417994403,1.0134673591847165,1.0295542918646703,1.0329450314836313,
                                 0.8399091428744104,1.183194313102852,1.3270249417514743,1.3741260241571782,1.3886851713731647,0.8009320304336658,
                                 1.0784099921488641,1.2605634567358641,1.3521450479855144,1.3945833986730691,0.48501133302963756,
                                 0.5732311386160185,0.6611470786026035,0.7321988148893847,0.7848204325776953}};
   
   const double arrayggg[_numg][_nums*_numv+1] = {{1.8316904746885967,0.0884575196178564,0.08927745123511201,
      0.09312988807560153,0.09375473713734206,0.09384639815451633,
      0.4023009808189219,0.3568188394233863,0.3792277903385474,0.385023859139406,
      0.38628228771061585,1.2849093157601243,0.9130646727951502,0.9795779118066792,
      1.0107076974124194,1.0210937399202111,2.868263730726409,1.4818711808522618,
      1.5140076423120297,1.5887234007732292,1.632183272904059,3.1141051355565033,
      1.4606771104192589,1.2174165183627634,1.194073346226104,1.2208356648480019},{3.0732520783114357,0.08845751961785646,0.08927745123511206,
         0.0931298880756016,0.09375473713734209,0.0938463981545164,0.402300980818922,
         0.3568188394233865,0.37922779033854764,0.3850238591394062,0.386282287710616,
         1.2849093157601235,0.9130646727951499,0.9795779118066787,1.0107076974124192,
         1.021093739920211,2.868263730726409,1.4818711808522615,1.5140076423120292,
         1.5887234007732287,1.6321832729040595,3.1141051355565033,1.4606771104192586,
         1.2174165183627628,1.1940733462261035,1.220835664848001},{5.156372469781652,0.0884575196178565,0.08927745123511215,
            0.09312988807560164,0.09375473713734214,0.09384639815451642,
            0.4023009808189219,0.3568188394233863,0.37922779033854753,
            0.38502385913940607,0.38628228771061596,1.2849093157601246,
            0.9130646727951504,0.9795779118066795,1.0107076974124196,1.0210937399202118,
            2.868263730726409,1.4818711808522613,1.5140076423120294,1.588723400773229,
            1.6321832729040595,3.1141051355565033,1.4606771104192589,1.2174165183627632,
            1.194073346226104,1.2208356648480017},{8.651479400196388,0.08845751961785643,0.08927745123511206,
               0.09312988807560155,0.09375473713734203,0.09384639815451633,
               0.4023009808189219,0.3568188394233863,0.3792277903385474,0.38502385913940607,
               0.38628228771061596,1.2849093157601243,0.9130646727951502,0.9795779118066792,
               1.0107076974124196,1.0210937399202114,2.868263730726409,1.4818711808522613,
               1.5140076423120294,1.588723400773229,1.6321832729040595,3.114105135556504,
               1.4606771104192589,1.2174165183627634,1.1940733462261042,1.2208356648480017},{14.515649567726417,0.08845751961785644,0.08927745123511206,
                  0.09312988807560157,0.09375473713734207,0.09384639815451634,
                  0.4023009808189222,0.35681883942338666,0.3792277903385478,0.3850238591394063,
                  0.38628228771061623,1.2849093157601243,0.9130646727951502,0.9795779118066792,
                  1.0107076974124196,1.0210937399202111,2.8682637307264103,1.4818711808522624,
                  1.5140076423120299,1.5887234007732296,1.6321832729040595,3.1141051355565033,
                  1.4606771104192589,1.2174165183627632,1.1940733462261035,1.2208356648480017},{24.354688097419878,0.08845751961785658,0.0892774512351122,
                     0.0931298880756017,0.09375473713734223,0.09384639815451651,
                     0.4023009808189222,0.35681883942338666,0.3792277903385478,0.3850238591394063,
                     0.3862822877106161,1.2849093157601241,0.9130646727951504,0.9795779118066792,
                     1.0107076974124196,1.0210937399202114,2.8682637307264103,1.4818711808522618,
                     1.5140076423120299,1.5887234007732296,1.6321832729040595,3.1141051355565033,
                     1.4606771104192589,1.2174165183627632,1.194073346226104,1.2208356648480014},{40.86285147317113,0.0884575196178565,0.08927745123511213,
                        0.09312988807560164,0.09375473713734213,0.09384639815451642,
                        0.40230098081892196,0.3568188394233863,0.37922779033854753,
                        0.38502385913940607,0.3862822877106159,1.2849093157601241,0.9130646727951499,
                        0.9795779118066792,1.0107076974124194,1.0210937399202114,2.8682637307264094,
                        1.4818711808522618,1.5140076423120294,1.5887234007732292,1.6321832729040595,
                        3.114105135556504,1.4606771104192589,1.2174165183627632,1.1940733462261035,
                        1.2208356648480014},{68.5606247076241,0.08845751961785643,0.08927745123511206,
                           0.09312988807560155,0.09375473713734207,0.09384639815451636,
                           0.4023009808189222,0.35681883942338666,0.3792277903385479,0.3850238591394064,
                           0.3862822877106163,1.2849093157601243,0.9130646727951504,0.9795779118066792,
                           1.0107076974124196,1.0210937399202111,2.868263730726409,1.4818711808522618,
                           1.5140076423120294,1.5887234007732292,1.632183272904059,3.114105135556504,
                           1.4606771104192589,1.2174165183627634,1.194073346226104,1.2208356648480019},{115.03258071419394,0.08845751961785638,0.08927745123511201,
                              0.09312988807560149,0.09375473713734202,0.09384639815451627,
                              0.4023009808189216,0.3568188394233861,0.3792277903385473,0.3850238591394058,
                              0.38628228771061573,1.2849093157601241,0.9130646727951504,0.9795779118066792,
                              1.0107076974124194,1.021093739920211,2.8682637307264094,1.4818711808522618,
                              1.5140076423120297,1.5887234007732292,1.6321832729040595,3.114105135556504,
                              1.4606771104192589,1.2174165183627632,1.194073346226104,1.2208356648480014},{250.,0.08845751961785638,0.08927745123511202,0.09312988807560152,
                                 0.09375473713734202,0.09384639815451631,0.40230098081892207,
                                 0.35681883942338644,0.3792277903385477,0.3850238591394062,0.3862822877106162,
                                 1.2849093157601241,0.9130646727951504,0.9795779118066792,1.0107076974124194,
                                 1.0210937399202114,2.8682637307264085,1.4818711808522618,1.5140076423120294,
                                 1.5887234007732287,1.6321832729040593,3.114105135556503,1.4606771104192584,
                                 1.217416518362763,1.1940733462261035,1.2208356648480012}};

   const double arraygqq[_numg][_nums*_numv+1] = {{1.8316904746885967,0.18780114602273515,0.04596658365909539,
      0.0072898378003158565,0.001067101172877444,0.00015440272396029898,
      0.17609401179373468,0.06038807351925928,0.014640724198990542,
      0.003154241147900005,0.0006628383854927648,0.16369278624308542,
      0.07089756733208911,0.026775789017443864,0.008669687930912273,
      0.00267411679675726,0.14653142773843542,0.06965523853316122,
      0.040337389257657744,0.020325030354116713,0.009488451768226502,
      0.09028268438781707,0.04996354108856377,0.03744951339451659,
      0.029192130417535676,0.02195951921576733},{3.0732520783114357,0.18780114602273518,0.04596658365909539,
         0.007289837800315858,0.0010671011728774443,0.0001544027239602991,
         0.17609401179373477,0.06038807351925928,0.014640724198990544,
         0.0031542411479000064,0.0006628383854927648,0.1636927862430854,
         0.07089756733208911,0.026775789017443864,0.008669687930912271,
         0.00267411679675726,0.14653142773843542,0.06965523853316122,
         0.04033738925765773,0.020325030354116716,0.009488451768226505,
         0.09028268438781706,0.04996354108856378,0.03744951339451659,
         0.029192130417535676,0.02195951921576734},{5.156372469781652,0.1878011460227347,0.045966583659095284,
            0.007289837800315839,0.0010671011728774415,0.00015440272396029868,
            0.17609401179373432,0.060388073519259136,0.014640724198990518,
            0.003154241147899998,0.0006628383854927633,0.1636927862430851,
            0.07089756733208898,0.026775789017443815,0.008669687930912256,
            0.002674116796757254,0.14653142773843508,0.06965523853316104,
            0.040337389257657626,0.020325030354116667,0.00948845176822648,
            0.09028268438781688,0.049963541088563664,0.037449513394516507,
            0.029192130417535617,0.02195951921576729},{8.651479400196388,0.18780114602273515,0.04596658365909539,
               0.0072898378003158565,0.0010671011728774443,0.00015440272396029898,
               0.17609401179373477,0.060388073519259296,0.01464072419899055,
               0.0031542411479000055,0.0006628383854927651,0.16369278624308542,
               0.07089756733208913,0.026775789017443867,0.008669687930912273,
               0.0026741167967572602,0.14653142773843547,0.06965523853316122,
               0.040337389257657744,0.020325030354116713,0.009488451768226502,
               0.09028268438781709,0.04996354108856378,0.0374495133945166,
               0.029192130417535676,0.02195951921576734},{14.515649567726417,0.18780114602273515,0.0459665836590954,
                  0.007289837800315858,0.0010671011728774443,0.00015440272396029903,
                  0.1760940117937347,0.06038807351925928,0.014640724198990544,
                  0.003154241147900005,0.0006628383854927648,0.1636927862430854,
                  0.07089756733208911,0.026775789017443864,0.008669687930912271,
                  0.00267411679675726,0.14653142773843547,0.06965523853316122,
                  0.04033738925765775,0.020325030354116716,0.009488451768226507,
                  0.09028268438781706,0.04996354108856378,0.0374495133945166,
                  0.029192130417535676,0.02195951921576734},{24.354688097419878,0.18780114602273473,0.0459665836590953,
                     0.007289837800315842,0.001067101172877442,0.00015440272396029868,
                     0.17609401179373432,0.06038807351925914,0.01464072419899051,
                     0.0031542411478999973,0.0006628383854927633,0.16369278624308503,
                     0.07089756733208896,0.026775789017443808,0.008669687930912254,
                     0.002674116796757254,0.14653142773843508,0.06965523853316105,
                     0.04033738925765764,0.020325030354116667,0.009488451768226481,
                     0.09028268438781688,0.049963541088563664,0.03744951339451651,
                     0.029192130417535617,0.02195951921576729},{40.86285147317113,0.1878011460227347,0.045966583659095284,
                        0.00728983780031584,0.001067101172877442,0.00015440272396029868,
                        0.17609401179373435,0.06038807351925915,0.01464072419899051,
                        0.003154241147899998,0.0006628383854927633,0.16369278624308506,
                        0.07089756733208898,0.026775789017443808,0.008669687930912254,
                        0.002674116796757254,0.14653142773843508,0.06965523853316105,
                        0.04033738925765764,0.020325030354116667,0.009488451768226481,
                        0.09028268438781686,0.049963541088563664,0.037449513394516507,
                        0.029192130417535617,0.02195951921576728},{68.5606247076241,0.1878011460227347,0.04596658365909529,
                           0.007289837800315843,0.0010671011728774417,0.0001544027239602987,
                           0.17609401179373432,0.06038807351925913,0.014640724198990507,
                           0.0031542411478999986,0.0006628383854927632,0.16369278624308506,
                           0.07089756733208896,0.0267757890174438,0.008669687930912252,
                           0.0026741167967572537,0.1465314277384351,0.06965523853316105,
                           0.040337389257657646,0.02032503035411667,0.009488451768226483,
                           0.09028268438781685,0.04996354108856366,0.037449513394516507,
                           0.0291921304175356,0.021959519215767283},{115.03258071419394,0.1878011460227351,0.04596658365909538,
                              0.007289837800315856,0.001067101172877444,0.00015440272396029895,
                              0.17609401179373468,0.060388073519259275,0.014640724198990545,
                              0.003154241147900004,0.0006628383854927648,0.16369278624308536,
                              0.0708975673320891,0.02677578901744386,0.008669687930912271,
                              0.0026741167967572594,0.14653142773843542,0.06965523853316119,
                              0.04033738925765773,0.02032503035411671,0.0094884517682265,
                              0.09028268438781706,0.04996354108856376,0.037449513394516576,
                              0.029192130417535666,0.02195951921576733},{250.,0.18780114602273518,0.0459665836590954,0.007289837800315856,
                                 0.0010671011728774443,0.00015440272396029903,0.1760940117937347,
                                 0.06038807351925928,0.014640724198990544,0.003154241147900005,
                                 0.0006628383854927647,0.16369278624308542,0.07089756733208913,
                                 0.026775789017443877,0.008669687930912273,0.0026741167967572602,
                                 0.14653142773843547,0.06965523853316122,0.040337389257657744,
                                 0.020325030354116713,0.009488451768226507,0.09028268438781707,
                                 0.04996354108856378,0.0374495133945166,0.029192130417535683,
                                 0.02195951921576734}};

//   double _fsrgggGridSum;              ///< the sum of all entries in the g->gg grid
//   double _fsrgggGrid[_nums*_numv];          ///< the g->gg grid
//   double _fsrgqqGridSum;              ///< the sum of all entries in the g->qq grid
//   double _fsrgqqGrid[_nums*_numv];          ///< the g->qq grid

   public:
      /// default constructor
      GeneratorEE(double Ecm);

      virtual ~GeneratorEE();

      /// \name IGenerator Interface
      ///@{
      /// See IGenerator for detailed documentation.

      /// Returns the current set of Signatures used by the generator.
      virtual const SignatureSet& getSignatures() const;

      /// Sets the Signatures for which to generate Configurations.
      virtual bool setSignatures(const SignatureSet& sigSet);

      /// Adds a Signature to generate Configurations for.
      virtual bool addSignature(const Signature& sig);

      /// Checks if the generator can handle a Signature.
      virtual bool checkSignature(const Signature& sig) const;

            /// Generates a 2-body Configuration.
      double generatePhi2(const Signature& sig2, Configuration& config);

      /// Mother script for generating configurations.
      bool generatePhi(const Signature& sig, Configuration& config);

      /// Generates an N+1 body configuration from a regionInfo
      double generatePhiNp1
          (const RegionInfo& Info, const Configuration& configN, Configuration& configNp1, FourVector internal);

      /// Generates a new Configuration.
      virtual bool generate(Configuration& config);

      /// Returns the weight of the last generated configuration.
      virtual double getLastWeight();
      ///@}

      /// Returns the generation weight for the given configuration.
      virtual double getWeight(const Configuration& config);

      /// Returns the name "GeneratorEE" of the Generator.
      virtual const std::string name() const;

   private:
      void setHistories();
      double getFlavorHistory(const Signature& sig, std::list<RegionInfo>& flalist);
      /// Generates the phiRad for FSR, given the flavor of the emitter. 
      double generatePhiRadFSR(const PhiNFKS& phiN, PdgID idFKS, PdgID idSister, PhiRadFKS& phiRad);
      /// Generates the phiRad for FSR, given the flavor of the emitter, using grids for the probabilities
      double generatePhiRadFSRGrid(const PhiNFKS& phiN, PdgID idFKS, PdgID idSister, PhiRadFKS& phiRad);
      /// Generates the phiRad for ISR, given the flavor of the emitter.
      double generatePhiRadISR(const PhiNFKS& phiN, PdgID idFKS, PdgID idSister, PhiRadFKS& phiRad);
      /// Calculates the integral of Pmax from zIRmin to zIRmax
      double getIkij(PdgID idK, PdgID idI, PdgID idJ, double zIRmin,double zIRmax);
      /// distributes in z according to Pmax
      double getZ(PdgID idK, PdgID idI, PdgID idJ, double zIRmin,double zIRmax);
      /// calcualtes the ratio of f/fmax
      double getFoverG(PdgID idK, PdgID idI, PdgID idJ, double z);
      /// calcualtes the splitting probability as a function of t and z
      double getSplittingProb(PdgID idK, PdgID idI, PdgID idJ, double t, double z);
      /// calcualtes the Sudakov factor as a function of t
      double getSudakov(PdgID idK, PdgID idI, PdgID idJ, double t);
      /// Returns the sum of the grid depending on the flavor information
      void get2Dgrid(double ENb, PdgID idK, PdgID idI, PdgID idJ, double &gridsum, double *grid);
      double getSV(double& s, double &v, double ENb, PdgID idK, PdgID idI, PdgID idJ, const double gridsum, const double *grid);
      /// converts from the variables s, v to t, z and returns the jacobian dtdz/dsdv
      double convertSVtoTZ(double& t, double& z, double ENb, double s, double v, PdgID idK, PdgID idI, PdgID idJ);
};

} // namespace Geneva

#endif // GENEVA_GENERATOR_EE_H
